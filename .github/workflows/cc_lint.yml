name: 'Lint PR'

on:
  pull_request_target:
    types:
      - opened
      - edited
      - reopened
      - synchronize
jobs:
  main:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed (newline-delimited).
          # These are regex patterns auto-wrapped in `^ $`.
          # Default: https://github.com/commitizen/conventional-commit-types
          #          "feat": {
          #            "description": "A new feature",
          #            "title": "Features"
          #          },
          #          "fix": {
          #            "description": "A bug fix",
          #            "title": "Bug Fixes"
          #          },
          #          "docs": {
          #            "description": "Documentation only changes",
          #            "title": "Documentation"
          #          },
          #          "style": {
          #            "description": "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)",
          #            "title": "Styles"
          #          },
          #          "refactor": {
          #            "description": "A code change that neither fixes a bug nor adds a feature",
          #            "title": "Code Refactoring"
          #          },
          #          "perf": {
          #            "description": "A code change that improves performance",
          #            "title": "Performance Improvements"
          #          },
          #          "test": {
          #            "description": "Adding missing tests or correcting existing tests",
          #            "title": "Tests"
          #          },
          #          "build": {
          #            "description": "Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)",
          #            "title": "Builds"
          #          },
          #          "ci": {
          #            "description": "Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)",
          #            "title": "Continuous Integrations"
          #          },
          #          "chore": {
          #            "description": "Other changes that don't modify src or test files",
          #            "title": "Chores"
          #          },
          #          "revert": {
          #            "description": "Reverts a previous commit",
          #            "title": "Reverts"
          #          }
          # Configure which scopes are allowed (newline-delimited).
          # These are regex patterns auto-wrapped in `^ $`.
          scopes: |
            component
            config
            new
            change
            ticket
          # Configure that a scope must always be provided.
          #          requireScope: true
          # Configure which scopes are disallowed in PR titles (newline-delimited).
          # For instance by setting the value below, `chore(release): ...` (lowercase)
          # and `ci(e2e,release): ...` (unknown scope) will be rejected.
          # These are regex patterns auto-wrapped in `^ $`.
          disallowScopes: |
            release
            [A-Z]+
          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            bot
            ignore
          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          headerPattern: '^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$'
          headerPatternCorrespondence: type, scope, subject
